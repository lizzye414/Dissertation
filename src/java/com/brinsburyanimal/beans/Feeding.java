package com.brinsburyanimal.beans;
// Generated 22-Jul-2019 17:44:49 by Hibernate Tools 4.3.1

import com.brinsburyanimal.dao.FeedingDao;
import com.brinsburyanimal.util.Utilities;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;
import javax.faces.convert.FacesConverter;


/**
 * Feeding generated by hbm2java
 */
@ManagedBean
@SessionScoped
public class Feeding implements java.io.Serializable {

    private Integer feedingId;
    private String descript;
    private Boolean am;
    private Boolean pm;
    private Set specieses = new HashSet(0);
    private List<Integer> feedingIdList = new ArrayList<>();

    public Feeding() {
    }

    public Feeding(int feedingId) {
        this.feedingId = feedingId;
    }

    public Feeding(int feedingId, String descript, Boolean am, Boolean pm, Set specieses) {
        this.feedingId = feedingId;
        this.descript = descript;
        this.am = am;
        this.pm = pm;
        this.specieses = specieses;
    }

    public int getFeedingId() {
        return this.feedingId;
    }

    public void setFeedingId(int feedingId) {
        this.feedingId = feedingId;
    }

    public String getDescript() {
        return this.descript;
    }

    public void setDescript(String descript) {
        this.descript = descript;
    }

    public Boolean getAm() {
        return this.am;
    }

    public void setAm(Boolean am) {
        this.am = am;
    }

    public Boolean getPm() {
        return this.pm;
    }

    public void setPm(Boolean pm) {
        this.pm = pm;
    }

    public Set getSpecieses() {
        return this.specieses;
    }

    public void setSpecieses(Set specieses) {
        this.specieses = specieses;
    }
        
    public List<Feeding> getAllFeedings() {
        List<Feeding> feedings = new ArrayList<>();
        FeedingDao dao = new FeedingDao();
        feedings = dao.getAllFeeding();
        return feedings;
    }
    
    public List<Integer> getAllFeedingIds(){
        feedingIdList.clear();
        List<Feeding> feedings = this.getAllFeedings();
        
        for (Feeding eachFeeding : feedings){
            feedingIdList.add(eachFeeding.feedingId); 
        }
        return feedingIdList;
    }
    
    public Feeding findFeedingById(String feedingId){
        Feeding feeding = new Feeding();
        List<Feeding> feedings = this.getAllFeedings();
        int chosenFeedingId = Integer.parseInt(feedingId);
        for (Feeding eachFeed: feedings){
            if(eachFeed.getFeedingId() == chosenFeedingId){
                feeding = eachFeed;
            }
        }
        return feeding;        
    }
    
    public Feeding findFeedingById(int feedingId){
        Feeding feeding = new Feeding();
        List<Feeding> feedings = this.getAllFeedings();
        for (Feeding eachFeed: feedings){
            if(eachFeed.getFeedingId() == feedingId){
                feeding = eachFeed;
            }
        }
        return feeding;        
    }
    
    public String showFeeding(){
        List<Feeding> feeding = this.getAllFeedings();
        String result = Utilities.printFeedingTable(feeding);
        return result;
    }
    
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (feedingId != null ? feedingId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Feeding)) {
            return false;
        }
        Feeding other = (Feeding) object;
        if ((this.feedingId == null && other.feedingId != null) || (this.feedingId != null && !this.feedingId.equals(other.feedingId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "com.beans.Feeding[ feedingId=" + feedingId + " ]";
    }
    
    
    
    /**
     * Converter to display string information on, and return objects from forms
     */
    @FacesConverter("FeedingConverter")
    public static class FeedingConverter implements Converter {

        private Feeding feeding = new Feeding();

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            try {
                 return feeding.findFeedingById(value);
            } catch (NumberFormatException e) {
                throw new ConverterException(new FacesMessage(value + " is not a valid Feeding ID"), e);
            }
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return "";
            }

            if (object instanceof Feeding) {
                return String.valueOf(((Feeding) object).getFeedingId());
            } else {
                throw new ConverterException(new FacesMessage(object + " is not a valid Feeding"));
            }
        }

    }

}
