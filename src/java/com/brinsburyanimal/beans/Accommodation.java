package com.brinsburyanimal.beans;
// Generated 22-Jul-2019 17:44:49 by Hibernate Tools 4.3.1


import com.brinsburyanimal.dao.AccommodationDao;
import com.brinsburyanimal.util.Utilities;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;
import javax.faces.convert.FacesConverter;

/**
 * Accommodation generated by hbm2java
 */
@ManagedBean
@SessionScoped
public class Accommodation  implements java.io.Serializable {


     private Integer accommId;
     private String area = "";
     private Integer number;
     private Set birdMammalRecords = new HashSet(0);
     private Set animals = new HashSet(0);
     private Set herptileRecords = new HashSet(0);
     private Set fishRecords = new HashSet(0);
     private List<String> areaList=new ArrayList<>();
     private List<String> numberList = new ArrayList<>();
     private String identity;


    public Accommodation() {
    }

	
    public Accommodation(int accommId) {
        this.accommId = accommId;
    }
    public Accommodation(int accommId, String area, Integer number, Set birdMammalRecords, Set animals, Set herptileRecords, Set fishRecords) {
       this.accommId = accommId;
       this.area = area;
       this.number = number;
       this.birdMammalRecords = birdMammalRecords;
       this.animals = animals;
       this.herptileRecords = herptileRecords;
       this.fishRecords = fishRecords;
    }
    
    public String getIdentity(){
        return (this.area + " " + this.number);
    }
    
    public int getAccommId() {
        return this.accommId;
    }
    
    public void setAccommId(int accommId) {
        this.accommId = accommId;
    }
    public String getArea() {
        return this.area;
    }
    
    public void setArea(String area) {
        this.area = area;
    }
    public Integer getNumber() {
        return this.number;
    }
    
    public void setNumber(Integer number) {
        this.number = number;
    }
    public Set getBirdMammalRecords() {
        return this.birdMammalRecords;
    }
    
    public void setBirdMammalRecords(Set birdMammalRecords) {
        this.birdMammalRecords = birdMammalRecords;
    }
    public Set getAnimals() {
        return this.animals;
    }
    
    public void setAnimals(Set animals) {
        this.animals = animals;
    }
    public Set getHerptileRecords() {
        return this.herptileRecords;
    }
    
    public void setHerptileRecords(Set herptileRecords) {
        this.herptileRecords = herptileRecords;
    }
    public Set getFishRecords() {
        return this.fishRecords;
    }
    
    public void setFishRecords(Set fishRecords) {
        this.fishRecords = fishRecords;
    }

    public List<Accommodation> getAllAccommodations() {
        List<Accommodation> accommodations = new ArrayList<Accommodation>();
        AccommodationDao dao = new AccommodationDao();
        accommodations = dao.getAllAccommodations();
        return accommodations;
    }
        
    public List<Accommodation> getHerptileAccommodations(){
        List<Accommodation> herptileAccommodations = new ArrayList<Accommodation>();
        List<Accommodation> accommodations = this.getAllAccommodations();
        for (Accommodation accomm: accommodations){
            if (((accomm.getArea().equals("Arid")) || (accomm.getArea().equals("Tropical")) || (accomm.getArea().equals("Invert")) || (accomm.getArea().equals("Amphibian")))){
                herptileAccommodations.add(accomm);
            }
        }
        return herptileAccommodations;
    }
    
    public List<Accommodation> getBirdMammalAccommodations(){
        List<Accommodation> birdMammalAccommodations = new ArrayList<Accommodation>();
        List<Accommodation> accommodations = this.getAllAccommodations();
        for (Accommodation accomm: accommodations){
            if (!((accomm.getArea().equals("Arid")) || (accomm.getArea().equals("Tropical")) || (accomm.getArea().equals("Invert")) || (accomm.getArea().equals("Amphibian")) || (accomm.getArea().equals("Fish")))){
                birdMammalAccommodations.add(accomm);
            }
        }
        return birdMammalAccommodations;
    }
    
    public List<Accommodation> getFishAccommodations(){
        List<Accommodation> FishAccommodations = new ArrayList<Accommodation>();
        List<Accommodation> accommodations = this.getAllAccommodations();
        for (Accommodation accomm: accommodations){
            if (((accomm.getArea().equals("Fish")) )){
                FishAccommodations.add(accomm);
            }
        }
        return FishAccommodations;
    }
    
    public String showAccommodations(){
        List<Accommodation> accommodations = this.getAllAccommodations();
        String result = Utilities.printAccommodationTable(accommodations);
        return result;
    }
    
    public List<String> getAllAreas(){
        area = "";
        areaList.clear();
        List<Accommodation> accommodations = this.getAllAccommodations();
        
        for (Accommodation accomm : accommodations){
            areaList.add(accomm.area); 
        }
        return areaList;
    };
    
    public List<String> getHerptileAreas(){
        area = "";
        areaList.clear();
        List<Accommodation> accommodations = this.getHerptileAccommodations();
        
        for (Accommodation accomm : accommodations){
            areaList.add(accomm.area); 
        }
        return areaList;
    };
    
    public List<String> getBirdMammalAreas(){
        area = "";
        areaList.clear();
        List<Accommodation> accommodations = this.getBirdMammalAccommodations();
        
        for (Accommodation accomm : accommodations){
            areaList.add(accomm.area); 
        }
        return areaList;
    };
    
    public List<String> getAllNumbers(){
        numberList.clear();
        List<Accommodation> accommodations = this.getAllAccommodations();
        
        for (Accommodation accomm : accommodations){
            String numberString = accomm.number.toString();
            numberList.add(numberString); 
        }
        return numberList;
    };
    
    public List<String> getHerptileNumbers(){
        numberList.clear();
        List<Accommodation> accommodations = this.getHerptileAccommodations();
        
        for (Accommodation accomm : accommodations){
            String numberString = accomm.number.toString();
            if(!numberList.contains(numberString)){
            numberList.add(numberString);
            }
        }
        return numberList;
    };
    
    public List<String> getBirdMammalNumbers(){
        numberList.clear();
        List<Accommodation> accommodations = this.getBirdMammalAccommodations();
        
        for (Accommodation accomm : accommodations){
            String numberString = accomm.number.toString();
            if(!numberList.contains(numberString)){
            numberList.add(numberString);
            }
        }
        return numberList;
    };
    
    public List<String> getFishNumbers(){
        numberList.clear();
        List<Accommodation> accommodations = this.getFishAccommodations();
        
        for (Accommodation accomm : accommodations){
            String numberString = accomm.number.toString();
            if(!numberList.contains(numberString)){
            numberList.add(numberString);
            }
        }
        return numberList;
    };
    
    public Accommodation findAccommodationById(String accommId){
        Accommodation accommodation = new Accommodation();
        List<Accommodation> allAccommodations = this.getAllAccommodations();
        for (Accommodation eachAccomm: allAccommodations){
            Integer chosenAccomm = Integer.parseInt(accommId);
            if(eachAccomm.getAccommId() == chosenAccomm){
                accommodation = eachAccomm;
            }
        }
        return accommodation;        
    }
    
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (accommId != null ? accommId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Accommodation)) {
            return false;
        }
        Accommodation other = (Accommodation) object;
        if ((this.accommId == null && other.accommId != null) || (this.accommId != null && !this.accommId.equals(other.accommId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "com.beans.Accommodation[ accommId=" + accommId + " ]";
    }
    
    
    /**
     * Converter to display string information on, and return objects from forms
     */
    @FacesConverter("AccommodationConverter")
    public static class AccommodationConverter implements Converter {

        private Accommodation accomm = new Accommodation();

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            try {
                 return accomm.findAccommodationById(value);
            } catch (NumberFormatException e) {
                throw new ConverterException(new FacesMessage(value + " is not a valid accommodation ID"), e);
            }
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return "";
            }

            if (object instanceof Accommodation) {
                return String.valueOf(((Accommodation) object).getAccommId());
            } else {
                throw new ConverterException(new FacesMessage(object + " is not a valid accommodation"));
            }
        }
    }
    
    
    



}


