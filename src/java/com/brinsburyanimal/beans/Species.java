package com.brinsburyanimal.beans;
// Generated 22-Jul-2019 17:44:49 by Hibernate Tools 4.3.1

import com.brinsburyanimal.dao.SpeciesDao;
import com.brinsburyanimal.util.Utilities;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;
import javax.faces.convert.FacesConverter;

/**
 * Species generated by hbm2java
 */
@ManagedBean
@SessionScoped
public class Species implements java.io.Serializable {

    private String latinName;
    private Cleaning cleaning;
    private Feeding feeding;
    private String commonName;
    private String info;
    private Set animals = new HashSet(0);
    private List<String> latinNamesList = new ArrayList<>();
    private List<String> commonNamesList = new ArrayList<>();

    public Species() {
    }

    public Species(String latinName) {
        this.latinName = latinName;
    }

    public Species(String latinName, Cleaning cleaning, Feeding feeding, String commonName, String info, Set animals) {
        this.latinName = latinName;
        this.cleaning = cleaning;
        this.feeding = feeding;
        this.commonName = commonName;
        this.info = info;
        this.animals = animals;
    }

    public String getLatinName() {
        return this.latinName;
    }

    public void setLatinName(String latinName) {
        this.latinName = latinName;
    }

    public Cleaning getCleaning() {
        return this.cleaning;
    }

    public void setCleaning(Cleaning cleaning) {
        this.cleaning = cleaning;
    }

    public Feeding getFeeding() {
        return this.feeding;
    }

    public void setFeeding(Feeding feeding) {
        this.feeding = feeding;
    }

    public String getCommonName() {
        return this.commonName;
    }

    public void setCommonName(String commonName) {
        this.commonName = commonName;
    }

    public String getInfo() {
        return this.info;
    }

    public void setInfo(String info) {
        this.info = info;
    }

    public Set getAnimals() {
        return this.animals;
    }

    public void setAnimals(Set animals) {
        this.animals = animals;
    }

    public String saveSpecies() {
        SpeciesDao dao = new SpeciesDao();
        dao.addSpecies(this);
        clearAll();
        return "CentreMgt";
    }

    private void clearAll() {
        this.latinName = "";
        this.commonName = "";
        this.info = "";
    }

    public List<Species> getAllSpecies() {
        List<Species> species = new ArrayList<>();
        SpeciesDao dao = new SpeciesDao();
        species = dao.getAllSpecies();
        return species;
    }
    
    public Species findSpeciesByLatinName(String latinName){
        Species species = new Species();
        List<Species> allSpecies = this.getAllSpecies();
        for (Species eachSpecies: allSpecies){
            if(eachSpecies.getLatinName().equals(latinName)){
                species = eachSpecies;
            }
        }
        return species;        
    }
    
    public List<String> getAllLatinNames(){
        latinNamesList.clear();
        List<Species> species = this.getAllSpecies();
        
        for (Species eachSpecies : species){
            latinNamesList.add(eachSpecies.latinName); 
        }
        return latinNamesList;
    }
    
    public List<String> getAllCommonNames(){
        commonNamesList.clear();
        List<Species> species = this.getAllSpecies();
        
        for (Species eachSpecies : species){
            commonNamesList.add(eachSpecies.commonName); 
        }
        return commonNamesList;
    }
    
    public String showSpecies(){
        List<Species> species = this.getAllSpecies();
        String result = Utilities.printSpeciesTable(species);
        return result;
    }
    
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (latinName != null ? latinName.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        if (!(object instanceof Species)) {
            return false;
        }
        Species other = (Species) object;
        if ((this.latinName == null && other.latinName != null) || (this.latinName != null && !this.latinName.equals(other.latinName))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "com.beans.Species[ latinName=" + latinName + " ]";
    }
    
    @FacesConverter("SpeciesConverter")
    public static class SpeciesConverter implements Converter {

        private Species species = new Species();

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            try {
                 return species.findSpeciesByLatinName(value);
            } catch (NumberFormatException e) {
                throw new ConverterException(new FacesMessage(value + " is not a valid latin name"), e);
            }
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return "";
            }

            if (object instanceof Species) {
                return ((Species) object).getLatinName();
            } else {
                throw new ConverterException(new FacesMessage(object + " is not a valid latin name"));
            }
        }
    }

}
